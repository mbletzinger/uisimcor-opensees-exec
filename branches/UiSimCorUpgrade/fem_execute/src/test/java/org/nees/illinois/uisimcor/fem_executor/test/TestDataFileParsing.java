package org.nees.illinois.uisimcor.fem_executor.test;

import java.net.URL;
import java.util.regex.Matcher;

import org.nees.illinois.uisimcor.fem_executor.process.DoubleMatrix;
import org.nees.illinois.uisimcor.fem_executor.process.OutputFileParser;
import org.nees.illinois.uisimcor.fem_executor.process.OutputFileParsingTask;
import org.nees.illinois.uisimcor.fem_executor.utils.Mtx2Str;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

/**
 * Test the parsing of text files.
 * @author Michael Bletzinger
 */
@Test(groups = { "data" })
public class TestDataFileParsing {
	/**
	 * Full path of a test text file.
	 */
	private String dispPath;
	/**
	 * Expected displacement values. Should match the contents of tmp_disp.out.
	 */

	private final double[][] expectedDisp = {
			{ 1.0E-4, 2.37522E-26, 3.11327E-20, 4.32399E-22, -2.37522E-26,
					3.11327E-20, 6.83281E-21, 2.29679E-36, -2.19581E-34,
					2.10932E-38, 5.36481E-37, -5.04524E-35, 1.1498E-37,
					-6.19862E-51, 5.95044E-49, -3.75328E-55, 1.21785E-51,
					-1.16916E-49 },
			{ -2.50011E-18, 1.0E-4, -3.4815E-20, -4.32399E-22, 6.32023E-21,
					-3.11327E-20, -6.83307E-21, 2.55715E-23, -3.68229E-21,
					-2.10036E-38, -5.36449E-37, 5.04536E-35, -1.1499E-37,
					-1.13389E-41, 1.08851E-39, 7.21536E-52, -4.71132E-51,
					4.87733E-49 },
			{ 3.14989E-20, -2.51989E-18, 1.0E-4, -1.03625E-20, -6.3752E-21,
					-4.9747E-19, -1.6392E-23, 2.42721E-21, -2.31804E-19,
					-2.09861E-38, 7.95769E-39, -1.78614E-36, -2.00579E-40,
					2.64699E-39, -2.54101E-37, 1.91369E-50, -2.47309E-50,
					3.31597E-48 },
			{ -2.30436E-20, 1.36908E-20, -2.4259E-18, 1.0E-4, 1.37477E-23,
					4.90183E-19, 4.18118E-24, -2.45434E-21, 2.35621E-19,
					1.7082E-21, 9.00593E-36, -8.64255E-34, -2.73752E-41,
					3.41821E-40, -3.28135E-38, 7.18625E-39, 5.15328E-50,
					-7.04769E-48 },
			{ -9.80155E-21, 2.27697E-20, 6.22805E-21, -2.48011E-18, 1.0E-4,
					6.20985E-21, 2.49424E-24, 3.12048E-25, -2.70012E-23,
					-1.70831E-21, 1.02286E-23, -1.47292E-21, 2.37937E-40,
					-2.97747E-39, 2.85826E-37, -7.18785E-39, -1.81422E-42,
					1.74161E-40 },
			{ 1.14744E-20, -1.02118E-20, -2.81596E-19, -1.75293E-20,
					-2.4941E-18, 1.0E-4, 1.66282E-24, 2.08032E-25,
					-1.80008E-23, -8.22202E-24, 1.21616E-21, -1.1627E-19,
					1.16379E-52, -8.36089E-51, -5.60537E-49, -5.10433E-41,
					6.60727E-40, -6.34273E-38 },
			{ -1.66027E-20, -1.50546E-20, 2.53441E-19, -3.29703E-21,
					-6.09013E-21, -2.47586E-18, 1.0E-4, 1.5323E-25, 7.4272E-21,
					1.04534E-22, -1.22728E-21, 1.2526E-19, 9.76116E-22,
					7.76885E-38, -7.20168E-36, 3.21232E-40, 1.56014E-38,
					-1.48617E-36 },
			{ 6.98251E-21, 9.84677E-21, 2.55648E-20, 2.37646E-22, -3.08705E-21,
					-1.58378E-20, -2.47366E-18, 1.0E-4, -7.4497E-21,
					-1.02443E-22, 1.97078E-21, -7.4497E-21, -9.76181E-22,
					6.39287E-24, -9.20573E-22, -2.65547E-40, -1.62577E-38,
					1.54931E-36 },
			{ 1.34416E-20, 1.41042E-20, -7.70797E-20, 1.8448E-20, 2.26141E-20,
					9.24794E-21, -1.86079E-20, -2.48011E-18, 1.0E-4,
					-5.77828E-21, -1.99558E-21, -2.77435E-19, -5.48568E-24,
					8.112E-22, -7.75749E-20, -1.23792E-39, 1.39813E-39,
					-1.95565E-37 },
			{ -1.12687E-20, -1.31373E-20, 9.73987E-20, -1.56666E-20,
					-2.59926E-20, -2.49607E-21, -9.91605E-21, -2.15175E-20,
					-2.50966E-18, 1.0E-4, 2.56957E-24, 2.72518E-19,
					5.62315E-25, -8.18216E-22, 7.85494E-20, 6.83281E-22,
					2.00452E-36, -1.92474E-34 },
			{ -2.27468E-20, -2.44947E-20, -4.9261E-20, -3.03467E-20,
					-1.47949E-20, -2.81865E-20, -1.52308E-20, -1.35737E-20,
					-9.19896E-21, -2.47713E-18, 1.0E-4, 5.17443E-21,
					4.53497E-25, 5.6736E-26, -4.90931E-24, -6.83329E-22,
					4.64936E-24, -6.69508E-22 },
			{ 3.06873E-20, 3.47778E-20, 2.72466E-20, 3.64423E-20, 2.48399E-20,
					-3.7406E-20, 3.18237E-20, 2.63192E-20, -1.86519E-19,
					-2.42859E-20, -2.507E-18, 1.0E-4, 3.77915E-25, 4.728E-26,
					-4.09109E-24, -4.11574E-24, 6.08545E-22, -5.82021E-20 },
			{ -2.38255E-20, -2.66608E-20, -1.8159E-20, -2.55771E-20,
					-2.08164E-20, 4.74077E-20, -2.60152E-20, -2.06558E-20,
					1.93215E-19, -8.54581E-21, 1.96185E-21, -2.47029E-18,
					1.0E-4, 4.10867E-26, 8.58666E-22, 3.35872E-23,
					-6.13676E-22, 6.13079E-20 },
			{ 1.14673E-20, 1.26261E-20, -2.83943E-21, 1.64761E-20, 2.18935E-20,
					6.55479E-21, 1.15134E-20, 9.79245E-21, 5.52854E-21,
					7.4176E-21, 5.4887E-21, -3.60636E-20, -2.4793E-18, 1.0E-4,
					-3.39038E-22, -3.29873E-23, 9.02923E-22, -2.39779E-21 },
			{ 6.83294E-21, 7.26966E-21, 2.19011E-20, 8.3976E-21, 2.85463E-21,
					2.27881E-21, 9.55831E-21, 9.22523E-21, -5.42268E-20,
					1.53386E-20, 9.89877E-21, 2.9225E-20, -1.95982E-20,
					-2.49944E-18, 1.0E-4, -2.07226E-21, -9.13855E-22,
					-9.94966E-20 },
			{ -5.49996E-21, -6.433E-21, 1.9059E-22, -8.98746E-21, -9.66044E-21,
					-7.75522E-21, -1.18039E-20, -1.16309E-20, 5.28124E-20,
					-1.40409E-20, -1.25462E-20, -1.84033E-20, -1.45773E-22,
					-5.79953E-21, -2.50011E-18, 1.0E-4, 7.13391E-25, 9.767E-20 },
			{ 1.75942E-20, 1.87345E-20, -6.62109E-21, 2.09756E-20, 2.26582E-20,
					3.09315E-20, 2.33236E-20, 2.34248E-20, 1.43873E-20,
					2.11106E-20, 2.35854E-20, 2.30765E-20, 7.20938E-21,
					1.59628E-20, 1.27074E-20, -2.49894E-18, 1.0E-4, 2.36935E-21 },
			{ -6.4127E-21, -7.43965E-21, 1.39854E-20, -9.05021E-21,
					-9.75495E-21, -2.21583E-21, -9.64813E-21, -1.82729E-20,
					1.99582E-21, -1.70764E-20, -1.8776E-20, -6.26982E-20,
					1.09499E-20, -3.60978E-21, -1.0014E-19, 4.22195E-21,
					-2.48521E-18, 1.0E-4 } };
	/**
	 * Expected force values. Should match the contents of tmp_forc.out.
	 */
	private final double[][] expectedForce = {
			{ 0.726521, -2.37522E-6, -3.11327, -0.0432399, 2.37522E-6,
					-3.11327, -0.683281, -1.39598E-16, 1.34154E-14, 0.0, 0.0,
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
			{ -5.20818E-5, 1.26916, 0.736458, -6.28152E-16, -1.26404,
					-4.26942E-14, 5.20818E-5, -0.00511429, 0.736458, 0.0, 0.0,
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
			{ -3.11374, 0.719336, 439.691, 3.10874, 0.0164973, 149.241,
					0.00499571, -0.735833, 70.6459, 0.0, 0.0, 0.0, 0.0, 0.0,
					0.0, 0.0, 0.0, 0.0 },
			{ -0.0436469, -0.0171214, 2.52608, 0.72194, 0.0164973, 2.915,
					0.00498847, 6.24096E-4, -0.0540024, -0.683281,
					-3.59837E-15, 3.45239E-13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
			{ -4.22207E-4, -1.28124, -0.585648, -0.00461835, 1.28573, 0.538826,
					0.00498847, 6.24096E-4, -0.0540024, 5.20818E-5,
					-0.00511429, 0.736458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
			{ -3.11035, -0.0303742, 148.741, 3.10037, 0.765583, 439.58,
					0.00498847, 6.24096E-4, -0.0540024, 0.00499571, -0.735833,
					70.6459, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
			{ -0.680381, -0.0303137, -0.697593, -0.0129291, 0.0290655,
					-0.697335, 1.44394, 6.20852E-4, -5.26204, -0.0673454,
					6.27339E-4, -5.26204, -0.683281, -3.64128E-17, 3.31905E-15,
					0.0, 0.0, 0.0 },
			{ 0.00295222, -0.035428, -1.43405, -0.0129291, 0.0290655,
					-0.697335, 0.00493635, 1.58738, -0.0540022, 0.00498847,
					-1.57591, -0.0540024, 5.20818E-5, -0.00511429, 0.736458,
					0.0, 0.0, 0.0 },
			{ -0.0010668, 0.705682, 69.9716, -0.0129291, 0.0290655, -0.697335,
					-5.19707, -0.0220401, 781.788, 5.20607, 0.0231261, 249.631,
					0.00499571, -0.735833, 70.6459, 0.0, 0.0, 0.0 },
			{ -0.00105783, -0.0307753, -0.728221, -0.696262, 0.0290655,
					-0.697335, -0.0612858, -0.0220404, 4.21717, 1.4369,
					0.0231261, 4.84936, 0.00498847, 6.24096E-4, -0.0540024,
					-0.683281, -2.00149E-15, 1.92139E-13 },
			{ -0.00105783, -0.0307753, -0.728221, -0.0129291, 0.0239512,
					-1.43379, 0.011022, -1.59863, -0.988215, -0.00207566,
					1.60995, -0.357576, 0.00498847, 6.24096E-4, -0.0540024,
					5.20818E-5, -0.00511429, 0.736458 },
			{ -0.00105783, -0.0307753, -0.728221, -0.0169481, 0.765061,
					69.9719, -5.19188, -0.0401278, 248.828, 5.1999, 0.0410513,
					781.616, 0.00498847, 6.24096E-4, -0.0540024, 0.00499571,
					-0.735833, 70.6459 },
			{ -0.00105783, -0.0307753, -0.728221, -0.0169391, 0.0286039,
					-0.727963, -0.667132, -0.0400359, -1.16002, -0.00818117,
					0.0409591, -1.15963, 0.753701, 6.22692E-4, -1.17477,
					-0.0382514, 6.26472E-4, -3.16727 },
			{ -0.00105783, -0.0307753, -0.728221, -0.0169391, 0.0286039,
					-0.727963, 0.0162012, -0.0451502, -1.89647, -0.00818117,
					0.0409591, -1.15963, 0.0049882, 2.28111, -0.790481,
					0.00498847, -1.26342, -0.0540024 },
			{ -0.00105783, -0.0307753, -0.728221, -0.0169391, 0.0286039,
					-0.727963, 0.0121822, 0.695959, 69.5092, -0.00818117,
					0.0409591, -1.15963, -1.10956, -0.741354, 678.468, 3.11373,
					0.0171214, 149.187 },
			{ -0.00105783, -0.0307753, -0.728221, -0.0169391, 0.0286039,
					-0.727963, 0.0121912, -0.0404975, -1.19064, -0.691514,
					0.0409591, -1.15963, -0.0320041, -0.00492191, 2.20056,
					0.72698, 0.0171213, 2.861 },
			{ -0.00105783, -0.0307753, -0.728221, -0.0169391, 0.0286039,
					-0.727963, 0.0121912, -0.0404975, -1.19064, -0.00818114,
					0.0358448, -1.89609, 0.0112206, -1.26904, -0.911169,
					4.22168E-4, 1.28635, -0.988092 },
			{ -0.00105783, -0.0307753, -0.728221, -0.0169391, 0.0286039,
					-0.727963, 0.0121912, -0.0404975, -1.19064, -0.0122002,
					0.776954, 69.5096, -3.09871, -0.0181747, 148.415, 3.11437,
					-0.705621, 439.549 } };
	/**
	 * Full path of a test text file.
	 */
	private String forcePath;
	/**
	 * Logger.
	 **/
	private final Logger log = LoggerFactory
			.getLogger(TestDataFileParsing.class);

	/**
	 * Convert Internet space codes and replace file separators for Windows
	 * systems.
	 * @param dirty
	 *            Original path.
	 * @return Cleaned up path.
	 */
	private String cleanPath(final String dirty) {
		String sep = System.getProperty("file.separator");
		String result = dirty.replaceAll("%20", " ");
		result = result.replaceAll("(?<!^)(\\\\|/){2,}",
				Matcher.quoteReplacement(sep));
		return result;
	}

	/**
	 * Compares two data matrices.
	 * @param actual
	 *            The actual data.
	 * @param expected
	 *            The expected data.
	 */
	private void compareData(final double[][] actual, final double[][] expected) {
		log.debug("Comparing expected " + Mtx2Str.matrix2String(expected)
				+ "\nwith actual\n" + Mtx2Str.matrix2String(actual));
		Assert.assertEquals(actual.length, expected.length);
		Assert.assertEquals(actual[0].length, expected[0].length);
		for (int i = 0; i < expected.length; i++) {
			for (int j = 0; j < expected[0].length; j++) {

				if (Double.isNaN(expected[i][j])) {
					Assert.assertTrue(Double.isNaN(actual[i][j]));
					continue;
				}
				final double increment = 0.001;
				Assert.assertEquals(actual[i][j], expected[i][j], increment);
			}
		}
	}

	/**
	 * Finds the two test output files.
	 */
	@BeforeClass
	public final void setup() {
		URL u = ClassLoader.getSystemResource("tmp_disp.out");
		dispPath = cleanPath(u.getPath());
		u = ClassLoader.getSystemResource("tmp_forc.out");
		forcePath = cleanPath(u.getPath());
	}

	/**
	 * Test the parsing of the two output files.
	 */
	@Test
	public final void testParsing() {
		OutputFileParser df = new OutputFileParser();
		df.parseDataFile(dispPath);
		DoubleMatrix result = df.getArchive();
		log.info("Parsed DISP:\n" + result);
		compareData(result.getData(), expectedDisp);

		df.parseDataFile(forcePath);
		result = df.getArchive();
		log.info("Parsed FORCE:\n" + result);
		compareData(result.getData(), expectedForce);
	}

	/**
	 * Test the parsing of the two output files.
	 */
	@Test
	public final void testParsingTasks() {
		OutputFileParsingTask ofpt1 = new OutputFileParsingTask(dispPath);
		OutputFileParsingTask ofpt2 = new OutputFileParsingTask(forcePath);
		Thread thrd1 = new Thread(ofpt1);
		Thread thrd2 = new Thread(ofpt2);
		log.debug("Starting threads");
		thrd1.start();
		thrd2.start();
		boolean done = false;
		while (done == false) {
			try {
				final int interval = 2000;
				Thread.sleep(interval);
			} catch (InterruptedException e) {
				log.info("Checking tasks");
			}
			done = ofpt1.isDone() && ofpt2.isDone();
		}
		compareData(ofpt1.getData(), expectedDisp);
		compareData(ofpt2.getData(), expectedForce);
	}

}

